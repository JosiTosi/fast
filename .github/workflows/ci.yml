name: Modern CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  COVERAGE_THRESHOLD: 80

jobs:
  # 1. PRECOMMIT CHECKS & BRANCH PROTECTION
  precommit:
    name: üîç Precommit Checks
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Install UV
      uses: astral-sh/setup-uv@v3
    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}
    - name: Install dependencies
      run: uv sync --all-extras --dev

    # Branch Protection through required checks
    - name: Validate branch protection
      run: |
        echo "‚úÖ Branch protection active through required status checks"
        echo "Current branch: ${{ github.ref }}"
        echo "PR target: ${{ github.base_ref }}"

  # 2. LINTING (Separate job for clear feedback)
  lint:
    name: üßπ Code Quality
    runs-on: ubuntu-latest
    needs: [precommit]

    steps:
    - uses: actions/checkout@v4
    - name: Install UV
      uses: astral-sh/setup-uv@v3
    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}
    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Run linting
      run: |
        echo "üîç Running code formatting checks..."
        uv run ruff format --check .
        echo "üîç Running linting..."
        uv run ruff check .
        echo "üîç Running type checking..."
        uv run mypy src/

  # 3. BUILD & COMPILE
  build:
    name: üî® Build
    runs-on: ubuntu-latest
    needs: [lint]

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-

    # Build (don't push yet - only for testing)
    - name: Build Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/image.tar

    - name: Upload image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: /tmp/image.tar

  # 4. UNIT TESTS
  unit-tests:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    needs: [build]

    steps:
    - uses: actions/checkout@v4
    - name: Install UV
      uses: astral-sh/setup-uv@v3
    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}
    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Run unit tests
      run: |
        echo "üß™ Running unit tests..."
        uv run pytest tests/ -v --cov=src --cov-report=xml --cov-report=term

    - name: Check coverage threshold
      run: |
        echo "üìä Checking coverage threshold of ${{ env.COVERAGE_THRESHOLD }}%..."
        uv run coverage report --fail-under=${{ env.COVERAGE_THRESHOLD }}

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests

  # 5. INTEGRATION TESTS (New!)
  integration-tests:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    needs: [build]

    steps:
    - uses: actions/checkout@v4

    - name: Download image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: /tmp

    - name: Load Docker image
      run: docker load --input /tmp/image.tar

    - name: Run integration tests
      run: |
        echo "üîó Starting integration tests..."
        # Start the application in container
        docker run -d --name test-app -p 8000:8000 ${{ needs.build.outputs.image-tag }}

        # Wait for app to be ready
        sleep 10

        # Run integration tests
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/health/ready || exit 1
        curl -f http://localhost:8000/health/live || exit 1
        curl -f http://localhost:8000/api/v1/ || exit 1

        echo "‚úÖ Integration tests passed!"

    - name: Cleanup
      if: always()
      run: |
        docker stop test-app || true
        docker rm test-app || true

  # 6. SECURITY SCAN
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: [build]

    steps:
    - uses: actions/checkout@v4
    - name: Install UV
      uses: astral-sh/setup-uv@v3
    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}
    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Run security scan
      run: |
        echo "üîí Running security scan..."
        uv run bandit -r src/ -f json -o bandit-report.json || true

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: bandit-report.json

  # 7. RELEASE (Only on main branch)
  release:
    name: üöÄ Release
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Download image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: /tmp

    - name: Load and push Docker image
      run: |
        docker load --input /tmp/image.tar
        docker tag ${{ needs.build.outputs.image-tag }} ghcr.io/${{ github.repository }}:latest
        docker tag ${{ needs.build.outputs.image-tag }} ghcr.io/${{ github.repository }}:${{ github.sha }}
        docker push ghcr.io/${{ github.repository }}:latest
        docker push ghcr.io/${{ github.repository }}:${{ github.sha }}

    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production..."
        echo "Image: ghcr.io/${{ github.repository }}:${{ github.sha }}"
        # Here w√ºrdest du deine echten Deployment-Commands einf√ºgen
        # z.B.: kubectl set image deployment/app app=ghcr.io/${{ github.repository }}:${{ github.sha }}
